open import Relation.Binary
open import Relation.Binary.PropositionalEquality
open import Data.List hiding (any)
open import Relation.Nullary
open import Data.List.Membership.Propositional
open import Data.Unit hiding (_≟_)
open import Data.List.Relation.Unary.Any
open import Data.Empty
open import Data.Product
open import Data.Sum
open import Agda.Builtin.Nat
open import Data.Nat

module Handlers.Energy {Action : Set} {ActionEnergy : Action -> Nat} {R : Set} {C : Set} {isDE : IsDecEquivalence {A = R} (_≡_) }
                                              {isDEC : IsDecEquivalence {A = C} (_≡_) }
                                              {isDECA : IsDecEquivalence {A = Action} (_≡_) }  where

open import Grammar {Action} {R} {C} renaming (NPred to State)
--open import Membership_And_State {Action} {R} {C} {isDE} {isDEC} {isDECA}
--open import Action_Handler {Action} {R} {C} {isDE} {isDEC} {isDECA}

open IsDecEquivalence isDE

------------------------------------------------------------------------------

data Energy : Nat -> Set where
  en : (n : Nat) -> Energy n

EnergyValue : ∀ {n} -> Energy n -> Nat
EnergyValue {n} x = n

open import Data.Sum

-- Unpacking actionHandler:
-- An action handler takes in a action, a world and an energy assigned to the world at type level
-- The starting energy of a world has to be atleast 1
-- This function returns a new world where the energy equals the energy of the world minus the energy of the action
-- or it will return a proof showing that the energy of the action is greater than the energy of the world

-- minus _≥_  


actionHandler : Set
actionHandler = ∀ {n} -> (α : Action)
                      -> World × Energy (suc n)
                      -> World × Energy (_-_ (suc n) (ActionEnergy α) ) ⊎  ActionEnergy α > (suc n) 

------------------------------------------------------------------------------------


ActionHandler : Set
ActionHandler = Action
                -> (txi : C taxi)
                -> (numberOfTrips : C taxi -> Nat) 
                -> suc (numberOfTrips txi) ≤ maxTrips txi
                -> World -> World
